{"created_at": "2021-01-13 06:32:37.389743", "build": null, "status": "unhealthy", "report": {"aidstream": {"desc": "AidStream (aidstream.org)", "results": {"TestAidstream.test_load_aidstream_datasets[Aidstream hosted dataset 1]": {"desc": "Test that aidstream sample datasets are live.", "args": ["Aidstream hosted dataset 1"], "outcome": "passed", "error_msg": ""}, "TestAidstream.test_load_aidstream_datasets[Aidstream hosted dataset 2]": {"desc": "Test that aidstream sample datasets are live.", "args": ["Aidstream hosted dataset 2"], "outcome": "passed", "error_msg": ""}, "TestAidstream.test_load_aidstream_datasets[Aidstream hosted dataset 3]": {"desc": "Test that aidstream sample datasets are live.", "args": ["Aidstream hosted dataset 3"], "outcome": "passed", "error_msg": ""}, "TestAidstream.test_200_response[Aidstream homepage]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Aidstream homepage"], "outcome": "passed", "error_msg": ""}, "TestAidstream.test_200_response[Aidstream hosted dataset 1]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Aidstream hosted dataset 1"], "outcome": "passed", "error_msg": ""}, "TestAidstream.test_200_response[Aidstream hosted dataset 2]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Aidstream hosted dataset 2"], "outcome": "passed", "error_msg": ""}, "TestAidstream.test_200_response[Aidstream hosted dataset 3]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Aidstream hosted dataset 3"], "outcome": "passed", "error_msg": ""}, "TestAidstream.test_non_tiny_response[Aidstream homepage]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Aidstream homepage"], "outcome": "passed", "error_msg": ""}, "TestAidstream.test_non_tiny_response[Aidstream hosted dataset 1]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Aidstream hosted dataset 1"], "outcome": "passed", "error_msg": ""}, "TestAidstream.test_non_tiny_response[Aidstream hosted dataset 2]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Aidstream hosted dataset 2"], "outcome": "passed", "error_msg": ""}, "TestAidstream.test_non_tiny_response[Aidstream hosted dataset 3]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Aidstream hosted dataset 3"], "outcome": "passed", "error_msg": ""}}, "status": "healthy"}, "archive_reference": {"desc": "Archive reference (archivereference.iatistandard.org)", "results": {"TestArchiveReference.test_locate_links[IATI Standard Homepage]": {"desc": "Tests that each page contains links to the defined URLs.", "args": ["IATI Standard Homepage"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_locate_links[IATI Standard - Summary Page]": {"desc": "Tests that each page contains links to the defined URLs.", "args": ["IATI Standard - Summary Page"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_locate_links[IATI Standard - Schema Page]": {"desc": "Tests that each page contains links to the defined URLs.", "args": ["IATI Standard - Schema Page"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_locate_links[IATI Standard - Old Schema Version, Developer Docs]": {"desc": "Tests that each page contains links to the defined URLs.", "args": ["IATI Standard - Old Schema Version, Developer Docs"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_locate_links[IATI Standard - Misc Developer Docs Page]": {"desc": "Tests that each page contains links to the defined URLs.", "args": ["IATI Standard - Misc Developer Docs Page"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_locate_links[IATI Standard - Activity Standard Docs Page]": {"desc": "Tests that each page contains links to the defined URLs.", "args": ["IATI Standard - Activity Standard Docs Page"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_locate_links[IATI Standard - Schema Version Homepage]": {"desc": "Tests that each page contains links to the defined URLs.", "args": ["IATI Standard - Schema Version Homepage"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_footer_license_information[IATI Standard Homepage]": {"desc": "Tests that the footer contains license information.\nThis should include information about each text and icon licensing.", "args": ["IATI Standard Homepage"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_footer_license_information[IATI Standard - Summary Page]": {"desc": "Tests that the footer contains license information.\nThis should include information about each text and icon licensing.", "args": ["IATI Standard - Summary Page"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_footer_license_information[IATI Standard - Schema Page]": {"desc": "Tests that the footer contains license information.\nThis should include information about each text and icon licensing.", "args": ["IATI Standard - Schema Page"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_footer_license_information[IATI Standard - Old Schema Version, Developer Docs]": {"desc": "Tests that the footer contains license information.\nThis should include information about each text and icon licensing.", "args": ["IATI Standard - Old Schema Version, Developer Docs"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_footer_license_information[IATI Standard - Misc Developer Docs Page]": {"desc": "Tests that the footer contains license information.\nThis should include information about each text and icon licensing.", "args": ["IATI Standard - Misc Developer Docs Page"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_footer_license_information[IATI Standard - Activity Standard Docs Page]": {"desc": "Tests that the footer contains license information.\nThis should include information about each text and icon licensing.", "args": ["IATI Standard - Activity Standard Docs Page"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_footer_license_information[IATI Standard - Schema Version Homepage]": {"desc": "Tests that the footer contains license information.\nThis should include information about each text and icon licensing.", "args": ["IATI Standard - Schema Version Homepage"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_locate_text[IATI Standard Homepage]": {"desc": "Tests that each page contains the text \"technical publishing framework\" in the heading.", "args": ["IATI Standard Homepage"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_200_response[IATI Standard Homepage]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Standard Homepage"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_200_response[IATI Standard - Summary Page]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Standard - Summary Page"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_200_response[IATI Standard - Schema Page]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Standard - Schema Page"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_200_response[IATI Standard - Old Schema Version, Developer Docs]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Standard - Old Schema Version, Developer Docs"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_200_response[IATI Standard - Misc Developer Docs Page]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Standard - Misc Developer Docs Page"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_200_response[IATI Standard - Activity Standard Docs Page]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Standard - Activity Standard Docs Page"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_200_response[IATI Standard - Schema Version Homepage]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Standard - Schema Version Homepage"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_non_tiny_response[IATI Standard Homepage]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Standard Homepage"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_non_tiny_response[IATI Standard - Summary Page]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Standard - Summary Page"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_non_tiny_response[IATI Standard - Schema Page]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Standard - Schema Page"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_non_tiny_response[IATI Standard - Old Schema Version, Developer Docs]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Standard - Old Schema Version, Developer Docs"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_non_tiny_response[IATI Standard - Misc Developer Docs Page]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Standard - Misc Developer Docs Page"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_non_tiny_response[IATI Standard - Activity Standard Docs Page]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Standard - Activity Standard Docs Page"], "outcome": "passed", "error_msg": ""}, "TestArchiveReference.test_non_tiny_response[IATI Standard - Schema Version Homepage]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Standard - Schema Version Homepage"], "outcome": "passed", "error_msg": ""}}, "status": "healthy"}, "d_portal": {"desc": "D-Portal (d-portal.org)", "results": {"TestDPortal.test_200_response[D-Portal Homepage]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["D-Portal Homepage"], "outcome": "passed", "error_msg": ""}, "TestDPortal.test_non_tiny_response[D-Portal Homepage]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["D-Portal Homepage"], "outcome": "passed", "error_msg": ""}}, "status": "healthy"}, "dashboard": {"desc": "Dashboard (dashboard.iatistandard.org)", "results": {"TestIATIDashboard.test_contains_links[Dashboard Homepage]": {"desc": "Test that each page contains links to the defined URLs.", "args": ["Dashboard Homepage"], "outcome": "passed", "error_msg": ""}, "TestIATIDashboard.test_contains_links[Page Generated Late in Process]": {"desc": "Test that each page contains links to the defined URLs.", "args": ["Page Generated Late in Process"], "outcome": "passed", "error_msg": ""}, "TestIATIDashboard.test_recently_generated[Dashboard Homepage]": {"desc": "Tests that the dashboard was generated in the past 7 days.", "args": ["Dashboard Homepage"], "outcome": "passed", "error_msg": ""}, "TestIATIDashboard.test_recently_generated[Page Generated Late in Process]": {"desc": "Tests that the dashboard was generated in the past 7 days.", "args": ["Page Generated Late in Process"], "outcome": "passed", "error_msg": ""}, "TestIATIDashboard.test_200_response[Dashboard Homepage]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Dashboard Homepage"], "outcome": "passed", "error_msg": ""}, "TestIATIDashboard.test_200_response[Page Generated Late in Process]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Page Generated Late in Process"], "outcome": "passed", "error_msg": ""}, "TestIATIDashboard.test_non_tiny_response[Dashboard Homepage]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Dashboard Homepage"], "outcome": "passed", "error_msg": ""}, "TestIATIDashboard.test_non_tiny_response[Page Generated Late in Process]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Page Generated Late in Process"], "outcome": "passed", "error_msg": ""}}, "status": "healthy"}, "datastore": {"desc": "Datastore (datastore.iatistandard.org)", "results": {"TestIATIDatastore.test_recent_activities[Activities updated since 2 days ago]": {"desc": "Confirm the datastore API knows of activities updated recently.", "args": ["Activities updated since 2 days ago"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_recent_activities[Activities updated since 3 days ago]": {"desc": "Confirm the datastore API knows of activities updated recently.", "args": ["Activities updated since 3 days ago"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_api_output_filetype[application/xml]": {"desc": "Confirm the datastore returns data of the requested filetype.\n\nThe test is conducted based on the data returned in the\n`Content-Type` response header. E.g.:\n\n    Content-Type: application/xml; charset=utf-8", "args": ["application/xml"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_api_output_filetype[application/json]": {"desc": "Confirm the datastore returns data of the requested filetype.\n\nThe test is conducted based on the data returned in the\n`Content-Type` response header. E.g.:\n\n    Content-Type: application/xml; charset=utf-8", "args": ["application/json"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_api_output_filetype[text/csv]": {"desc": "Confirm the datastore returns data of the requested filetype.\n\nThe test is conducted based on the data returned in the\n`Content-Type` response header. E.g.:\n\n    Content-Type: application/xml; charset=utf-8", "args": ["text/csv"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_last_successful_fetch[Datastore list of datasets]": {"desc": "Confirm the datastore has fetched data within the last 7 days.", "args": ["Datastore list of datasets"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_200_response[datastore.iatistandard.org]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["datastore.iatistandard.org"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_200_response[Activities updated since 2 days ago]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Activities updated since 2 days ago"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_200_response[Activities updated since 3 days ago]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Activities updated since 3 days ago"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_200_response[Datastore download: CSV]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Datastore download: CSV"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_200_response[Datastore download: XML]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Datastore download: XML"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_200_response[Datastore download: JSON]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Datastore download: JSON"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_200_response[Datastore list of datasets]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Datastore list of datasets"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_non_tiny_response[datastore.iatistandard.org]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["datastore.iatistandard.org"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_non_tiny_response[Activities updated since 2 days ago]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Activities updated since 2 days ago"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_non_tiny_response[Activities updated since 3 days ago]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Activities updated since 3 days ago"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_non_tiny_response[Datastore download: CSV]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Datastore download: CSV"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_non_tiny_response[Datastore download: XML]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Datastore download: XML"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_non_tiny_response[Datastore download: JSON]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Datastore download: JSON"], "outcome": "passed", "error_msg": ""}, "TestIATIDatastore.test_non_tiny_response[Datastore list of datasets]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Datastore list of datasets"], "outcome": "passed", "error_msg": ""}}, "status": "healthy"}, "discuss": {"desc": "Discuss (discuss.iatistandard.org)", "results": {"TestIATIDiscuss.test_contains_links[IATI Discuss]": {"desc": "Test the page contains a link to:\n\nhttp://iatistandard.org/en/about/", "args": ["IATI Discuss"], "outcome": "passed", "error_msg": ""}, "TestIATIDiscuss.test_contains_links[IATI Discuss Welcome Thread]": {"desc": "Test the page contains a link to:\n\nhttp://iatistandard.org/en/about/", "args": ["IATI Discuss Welcome Thread"], "outcome": "passed", "error_msg": ""}, "TestIATIDiscuss.test_welcome_thread_welcomingness[IATI Discuss Welcome Thread]": {"desc": "Test the Welcome Thread says \"Welcome to IATI Discuss\".", "args": ["IATI Discuss Welcome Thread"], "outcome": "passed", "error_msg": ""}, "TestIATIDiscuss.test_200_response[IATI Discuss]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Discuss"], "outcome": "passed", "error_msg": ""}, "TestIATIDiscuss.test_200_response[IATI Discuss Welcome Thread]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Discuss Welcome Thread"], "outcome": "passed", "error_msg": ""}, "TestIATIDiscuss.test_non_tiny_response[IATI Discuss]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Discuss"], "outcome": "passed", "error_msg": ""}, "TestIATIDiscuss.test_non_tiny_response[IATI Discuss Welcome Thread]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Discuss Welcome Thread"], "outcome": "passed", "error_msg": ""}}, "status": "healthy"}, "global_consistency": {"desc": "Consistency of various top level figures across IATI websites.", "results": {"TestGlobalConsistency.test_activity_count_above_min": {"desc": "Test to ensure the unique activity count is above a specified minumum value.\nThis checks both the dashboard and datastore.", "args": [], "outcome": "failed", "error_msg": "self = <test_global_consistency.TestGlobalConsistency object at 0x7f8bacac0510>\ndash_home_activity_count = 371145, dash_home_unique_activity_count = 348409\ndash_activities_activity_count = 371145\ndash_activities_unique_activity_count = 348409\ndatastore_api_activity_count = 910422\n\n    def test_activity_count_above_min(self, dash_home_activity_count, dash_home_unique_activity_count, dash_activities_activity_count, dash_activities_unique_activity_count, datastore_api_activity_count):\n        \"\"\"\n        Test to ensure the unique activity count is above a specified minumum value.\n        This checks both the dashboard and datastore.\n        \"\"\"\n        min_activity_count = 850000\n    \n>       assert dash_home_activity_count >= min_activity_count\nE       assert 371145 >= 850000\n\ntests/test_global_consistency.py:150: AssertionError"}, "TestGlobalConsistency.test_activity_count_dash_value_consistency": {"desc": "Test to ensure activity counts are consistent within the dashboard.", "args": [], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_unique_vs_total_dash_activity_values": {"desc": "Test to ensure unique activity counts within the dashboard are not higher\nthan the overall activity counts.", "args": [], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_activity_count_consistency_datastore_dashboard": {"desc": "Test to ensure the activity count is consistent, within a margin of error,\nbetween the datastore and dashboard.", "args": [], "outcome": "failed", "error_msg": "self = <test_global_consistency.TestGlobalConsistency object at 0x7f8bacc95d90>\ndatastore_api_activity_count = 910422, dash_home_unique_activity_count = 348409\n\n    def test_activity_count_consistency_datastore_dashboard(self, datastore_api_activity_count, dash_home_unique_activity_count):\n        \"\"\"\n        Test to ensure the activity count is consistent, within a margin of error,\n        between the datastore and dashboard.\n        \"\"\"\n        max_datastore_disparity = 0.1\n    \n        assert datastore_api_activity_count >= dash_home_unique_activity_count * (1 - max_datastore_disparity)\n>       assert datastore_api_activity_count <= dash_home_unique_activity_count * (1 + max_datastore_disparity)\nE       assert 910422 <= (348409 * (1 + 0.1))\n\ntests/test_global_consistency.py:180: AssertionError"}, "TestGlobalConsistency.test_activity_count_consistency_iatistandard_homepage": {"desc": "Test to ensure the activity count is consistent, within a margin of error,\nbetween the registry and the IATI Standard homepage.", "args": [], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_activity_file_count_above_min": {"desc": "Test to ensure the unique activity file count is above a specified minumum value.\nThis checks both the dashboard and registry.", "args": [], "outcome": "failed", "error_msg": "self = <test_global_consistency.TestGlobalConsistency object at 0x7f8baccb79d0>\nregistry_activity_file_count = 7366, dash_home_activity_file_count = 3444\ndash_files_activity_file_count = 3444\n\n    def test_activity_file_count_above_min(self, registry_activity_file_count, dash_home_activity_file_count, dash_files_activity_file_count):\n        \"\"\"\n        Test to ensure the unique activity file count is above a specified minumum value.\n        This checks both the dashboard and registry.\n        \"\"\"\n        min_file_count = 4700\n    \n        assert registry_activity_file_count >= min_file_count\n>       assert dash_home_activity_file_count >= min_file_count\nE       assert 3444 >= 4700\n\ntests/test_global_consistency.py:200: AssertionError"}, "TestGlobalConsistency.test_activity_file_count_dash_values": {"desc": "Test to ensure activity file counts are consistent within the dashboard.", "args": [], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_activity_file_count_consistency": {"desc": "Test to ensure the activity file count is consistent, within a margin of error,\nbetween the registry and dashboard.", "args": [], "outcome": "failed", "error_msg": "self = <test_global_consistency.TestGlobalConsistency object at 0x7f8baccb7cd0>\nregistry_activity_file_count = 7366, dash_home_activity_file_count = 3444\ndash_files_activity_file_count = 3444\n\n    def test_activity_file_count_consistency(self, registry_activity_file_count, dash_home_activity_file_count, dash_files_activity_file_count):\n        \"\"\"\n        Test to ensure the activity file count is consistent, within a margin of error,\n        between the registry and dashboard.\n        \"\"\"\n        max_registry_disparity = 0.15\n    \n        assert registry_activity_file_count >= dash_files_activity_file_count * (1 - max_registry_disparity)\n>       assert registry_activity_file_count <= dash_files_activity_file_count * (1 + max_registry_disparity)\nE       assert 7366 <= (3444 * (1 + 0.15))\n\ntests/test_global_consistency.py:218: AssertionError"}, "TestGlobalConsistency.test_org_file_count_above_min": {"desc": "Test to ensure the organisation file count is above a specified minumum value.\nThis checks both the dashboard and registry.", "args": [], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_org_file_count_dash_values": {"desc": "Test to ensure organisation file counts are consistent within the dashboard.", "args": [], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_organisation_dataset_count_consistency": {"desc": "Test to ensure the activity file count is consistent, within a margin of error,\nbetween the registry and dashboard.", "args": [], "outcome": "failed", "error_msg": "self = <test_global_consistency.TestGlobalConsistency object at 0x7f8baccb3fd0>\nregistry_organisation_file_count = 871, dash_home_org_file_count = 532\ndash_files_org_file_count = 532\n\n    def test_organisation_dataset_count_consistency(self, registry_organisation_file_count, dash_home_org_file_count, dash_files_org_file_count):\n        \"\"\"\n        Test to ensure the activity file count is consistent, within a margin of error,\n        between the registry and dashboard.\n        \"\"\"\n        max_registry_disparity = 0.05\n    \n        assert registry_organisation_file_count >= dash_files_org_file_count * (1 - max_registry_disparity)\n>       assert registry_organisation_file_count <= dash_files_org_file_count * (1 + max_registry_disparity)\nE       assert 871 <= (532 * (1 + 0.05))\n\ntests/test_global_consistency.py:246: AssertionError"}, "TestGlobalConsistency.test_publisher_count_above_min": {"desc": "Test to ensure the publisher count is above a specified minumum value.\nThis checks both the dashboard and registry.", "args": [], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_publisher_count_dash_values": {"desc": "Test to ensure organisation file counts are consistent within the dashboard.", "args": [], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_publisher_count_consistency_dashboard": {"desc": "Test to ensure the publisher count is consistent, within a margin of error,\nbetween the registry and dashboard.", "args": [], "outcome": "failed", "error_msg": "self = <test_global_consistency.TestGlobalConsistency object at 0x7f8bacb16a50>\nregistry_home_publisher_count = 1240, dash_home_publisher_count = 780\n\n    def test_publisher_count_consistency_dashboard(self, registry_home_publisher_count, dash_home_publisher_count):\n        \"\"\"\n        Test to ensure the publisher count is consistent, within a margin of error,\n        between the registry and dashboard.\n        \"\"\"\n        max_registry_disparity = 0.03\n    \n        assert registry_home_publisher_count >= dash_home_publisher_count * (1 - max_registry_disparity)\n>       assert registry_home_publisher_count <= dash_home_publisher_count * (1 + max_registry_disparity)\nE       assert 1240 <= (780 * (1 + 0.03))\n\ntests/test_global_consistency.py:274: AssertionError"}, "TestGlobalConsistency.test_publisher_count_consistency_query_builder": {"desc": "Test to ensure the publisher count is consistent, within a margin of error,\nbetween the registry and query builder.", "args": [], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_publisher_count_consistency_iatistandard_homepage": {"desc": "Test to ensure the publisher count is consistent, within a margin of error,\nbetween the registry and the IATI Standard homepage.", "args": [], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_200_response[IATI Registry - Homepage]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Registry - Homepage"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_200_response[IATI Registry - Activity Dataset Page]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Registry - Activity Dataset Page"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_200_response[IATI Registry - Organisation Dataset Page]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Registry - Organisation Dataset Page"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_200_response[IATI Standard - Homepage]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Standard - Homepage"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_200_response[IATI Dashboard - Homepage]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Dashboard - Homepage"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_200_response[IATI Dashboard - Activities Page]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Dashboard - Activities Page"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_200_response[IATI Dashboard - Files Page]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Dashboard - Files Page"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_200_response[IATI Dashboard - Publisher Page]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Dashboard - Publisher Page"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_200_response[Datastore API - Activity Count]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Datastore API - Activity Count"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_200_response[Query Builder]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Query Builder"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_non_tiny_response[IATI Registry - Homepage]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Registry - Homepage"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_non_tiny_response[IATI Registry - Activity Dataset Page]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Registry - Activity Dataset Page"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_non_tiny_response[IATI Registry - Organisation Dataset Page]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Registry - Organisation Dataset Page"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_non_tiny_response[IATI Standard - Homepage]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Standard - Homepage"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_non_tiny_response[IATI Dashboard - Homepage]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Dashboard - Homepage"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_non_tiny_response[IATI Dashboard - Activities Page]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Dashboard - Activities Page"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_non_tiny_response[IATI Dashboard - Files Page]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Dashboard - Files Page"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_non_tiny_response[IATI Dashboard - Publisher Page]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Dashboard - Publisher Page"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_non_tiny_response[Datastore API - Activity Count]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Datastore API - Activity Count"], "outcome": "passed", "error_msg": ""}, "TestGlobalConsistency.test_non_tiny_response[Query Builder]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Query Builder"], "outcome": "passed", "error_msg": ""}}, "status": "unhealthy"}, "google_group": {"desc": "Old IATI google group", "results": {"TestGoogleGroup.test_200_response[Google Group Landing Page]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Google Group Landing Page"], "outcome": "passed", "error_msg": ""}, "TestGoogleGroup.test_non_tiny_response[Google Group Landing Page]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Google Group Landing Page"], "outcome": "passed", "error_msg": ""}}, "status": "healthy"}, "iati_standard": {"desc": "IATI website (iatistandard.org)", "results": {"TestIATIStandard.test_contains_links[iatistandard.org]": {"desc": "Confirm the page contains links to:\n\n* /en/news/\n* /en/about/\n* /en/iati-standard/\n* /en/using-data/\n* /en/contact/\n* /en/privacy-policy/", "args": ["iatistandard.org"], "outcome": "passed", "error_msg": ""}, "TestIATIStandard.test_contains_expected_text[iatistandard.org]": {"desc": "Confirm the page contains the following text:\n\n    IATI is a global initiative to improve the transparency\n    of development and humanitarian resources", "args": ["iatistandard.org"], "outcome": "passed", "error_msg": ""}, "TestIATIStandard.test_contains_newsletter_signup_form[iatistandard.org]": {"desc": "Confirm the page includes a newsletter signup form.", "args": ["iatistandard.org"], "outcome": "passed", "error_msg": ""}, "TestIATIStandard.test_200_response[iatistandard.org]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["iatistandard.org"], "outcome": "passed", "error_msg": ""}, "TestIATIStandard.test_non_tiny_response[iatistandard.org]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["iatistandard.org"], "outcome": "passed", "error_msg": ""}}, "status": "healthy"}, "iati_support": {"desc": "Support (support.iatistandard.org)", "results": {"TestIATISupport.test_200_response[support.iatistandard.org]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["support.iatistandard.org"], "outcome": "passed", "error_msg": ""}, "TestIATISupport.test_non_tiny_response[support.iatistandard.org]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["support.iatistandard.org"], "outcome": "passed", "error_msg": ""}}, "status": "healthy"}, "iati_wiki": {"desc": "Old wiki (wiki.archive.iatistandard.org)", "results": {"TestIATIWiki.test_locate_links[wiki.archive.iatistandard.org]": {"desc": "Confirm each page contains links to:\n\n* iatistandard.org\n* iatiregistry.org", "args": ["wiki.archive.iatistandard.org"], "outcome": "passed", "error_msg": ""}, "TestIATIWiki.test_200_response[wiki.archive.iatistandard.org]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["wiki.archive.iatistandard.org"], "outcome": "passed", "error_msg": ""}, "TestIATIWiki.test_non_tiny_response[wiki.archive.iatistandard.org]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["wiki.archive.iatistandard.org"], "outcome": "passed", "error_msg": ""}}, "status": "healthy"}, "query_builder": {"desc": "Query builder (datastore.iatistandard.org/query/)", "results": {"TestQueryBuilder.test_locate_links[datastore.iatistandard.org/query/]": {"desc": "Confirm the page contains a link to:\n\n* https://iatistandard.org/en/using-data/IATI-tools-and-resources/IATI-datastore/", "args": ["datastore.iatistandard.org/query/"], "outcome": "passed", "error_msg": ""}, "TestQueryBuilder.test_locate_links[POST Example]": {"desc": "Confirm the page contains a link to:\n\n* https://iatistandard.org/en/using-data/IATI-tools-and-resources/IATI-datastore/", "args": ["POST Example"], "outcome": "passed", "error_msg": ""}, "TestQueryBuilder.test_form_submit_link[POST Example]": {"desc": "Confirm result page contains a link to the relevant search.", "args": ["POST Example"], "outcome": "passed", "error_msg": ""}, "TestQueryBuilder.test_200_response[datastore.iatistandard.org/query/]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["datastore.iatistandard.org/query/"], "outcome": "passed", "error_msg": ""}, "TestQueryBuilder.test_200_response[POST Example]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["POST Example"], "outcome": "passed", "error_msg": ""}, "TestQueryBuilder.test_200_response[Publisher Information]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Publisher Information"], "outcome": "passed", "error_msg": ""}, "TestQueryBuilder.test_non_tiny_response[datastore.iatistandard.org/query/]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["datastore.iatistandard.org/query/"], "outcome": "passed", "error_msg": ""}, "TestQueryBuilder.test_non_tiny_response[POST Example]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["POST Example"], "outcome": "passed", "error_msg": ""}, "TestQueryBuilder.test_non_tiny_response[Publisher Information]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Publisher Information"], "outcome": "passed", "error_msg": ""}}, "status": "healthy"}, "registry": {"desc": "Registry (iatiregistry.org)", "results": {"TestIATIRegistry.test_contains_links[iatiregistry.org]": {"desc": "Test that each page contains links to the defined URLs.", "args": ["iatiregistry.org"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_contains_links[IATI Registry registration page]": {"desc": "Test that each page contains links to the defined URLs.", "args": ["IATI Registry registration page"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_contains_links[IATI Registry login page]": {"desc": "Test that each page contains links to the defined URLs.", "args": ["IATI Registry login page"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_contains_links[IATI Registry: Random dataset]": {"desc": "Test that each page contains links to the defined URLs.", "args": ["IATI Registry: Random dataset"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_contains_links[IATI Registry: Random publisher page]": {"desc": "Test that each page contains links to the defined URLs.", "args": ["IATI Registry: Random publisher page"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_registration_form_presence[IATI Registry registration page]": {"desc": "Test that there is a valid registration form on the Registry Registration Page.", "args": ["IATI Registry registration page"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_login_form_presence[IATI Registry login page]": {"desc": "Test that there is a valid login form on the Registry Login Page.", "args": ["IATI Registry login page"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_200_response[iatiregistry.org]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["iatiregistry.org"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_200_response[IATI Registry registration page]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Registry registration page"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_200_response[IATI Registry login page]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Registry login page"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_200_response[IATI Registry: Random publisher page]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Registry: Random publisher page"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_200_response[IATI Registry: Random dataset]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Registry: Random dataset"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_200_response[IATI Registry API: Package search call]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["IATI Registry API: Package search call"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_non_tiny_response[iatiregistry.org]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["iatiregistry.org"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_non_tiny_response[IATI Registry registration page]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Registry registration page"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_non_tiny_response[IATI Registry login page]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Registry login page"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_non_tiny_response[IATI Registry: Random publisher page]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Registry: Random publisher page"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_non_tiny_response[IATI Registry: Random dataset]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Registry: Random dataset"], "outcome": "passed", "error_msg": ""}, "TestIATIRegistry.test_non_tiny_response[IATI Registry API: Package search call]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["IATI Registry API: Package search call"], "outcome": "passed", "error_msg": ""}}, "status": "healthy"}, "validator": {"desc": "Validator (validator.iatistandard.org)", "results": {"TestIATIValidator.test_contains_links[validator.iatistandard.org]": {"desc": "Confirm the validator contains a link to iatistandard.org", "args": ["validator.iatistandard.org"], "outcome": "passed", "error_msg": ""}, "TestIATIValidator.test_contains_form[validator.iatistandard.org]": {"desc": "Confirm the validator contains a form on each of three tabs.", "args": ["validator.iatistandard.org"], "outcome": "passed", "error_msg": ""}, "TestIATIValidator.test_valid_input_xml[Valid paste data]": {"desc": "Confirm the validator correctly identifies valid XML as such.", "args": ["Valid paste data"], "outcome": "passed", "error_msg": ""}, "TestIATIValidator.test_valid_input_xml[Valid URL data]": {"desc": "Confirm the validator correctly identifies valid XML as such.", "args": ["Valid URL data"], "outcome": "passed", "error_msg": ""}, "TestIATIValidator.test_invalid_input_xml[Invalid paste data]": {"desc": "Confirm the validator correctly identifies invalid XML as such.", "args": ["Invalid paste data"], "outcome": "passed", "error_msg": ""}, "TestIATIValidator.test_invalid_input_xml[Invalid URL data]": {"desc": "Confirm the validator correctly identifies invalid XML as such.", "args": ["Invalid URL data"], "outcome": "passed", "error_msg": ""}, "TestIATIValidator.test_200_response[validator.iatistandard.org]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["validator.iatistandard.org"], "outcome": "passed", "error_msg": ""}, "TestIATIValidator.test_200_response[Valid paste data]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Valid paste data"], "outcome": "passed", "error_msg": ""}, "TestIATIValidator.test_200_response[Invalid paste data]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Invalid paste data"], "outcome": "passed", "error_msg": ""}, "TestIATIValidator.test_200_response[Valid URL data]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Valid URL data"], "outcome": "passed", "error_msg": ""}, "TestIATIValidator.test_200_response[Invalid URL data]": {"desc": "Confirm each request has a 200 (success) status code.", "args": ["Invalid URL data"], "outcome": "passed", "error_msg": ""}, "TestIATIValidator.test_non_tiny_response[validator.iatistandard.org]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["validator.iatistandard.org"], "outcome": "passed", "error_msg": ""}, "TestIATIValidator.test_non_tiny_response[Valid paste data]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Valid paste data"], "outcome": "passed", "error_msg": ""}, "TestIATIValidator.test_non_tiny_response[Invalid paste data]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Invalid paste data"], "outcome": "passed", "error_msg": ""}, "TestIATIValidator.test_non_tiny_response[Valid URL data]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Valid URL data"], "outcome": "passed", "error_msg": ""}, "TestIATIValidator.test_non_tiny_response[Invalid URL data]": {"desc": "Confirm each request has response content that is not tiny.", "args": ["Invalid URL data"], "outcome": "passed", "error_msg": ""}}, "status": "healthy"}}}